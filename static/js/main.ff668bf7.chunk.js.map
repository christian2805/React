{"version":3,"sources":["Person.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","className","name","title","first","last","src","picture","large","FetchRandomUser","state","loading","persons","filter","minAge","maxAge","setFilter","e","setState","target","dataset","setAge","age","Number","value","fetch","response","json","data","this","results","height","width","count","filtered","person","dob","console","log","gender","data-filter","onClick","range","min","max","start","connect","onUpdate","index","map","key","login","uuid","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAEe,SAASA,EAAOC,GAC7B,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,OACZD,EAAME,KAAKC,MADd,KACuBH,EAAME,KAAKE,MADlC,IAC0CJ,EAAME,KAAKG,MAErD,yBAAKC,IAAKN,EAAMO,QAAQC,S,UCCTC,E,2MACnBC,MAAQ,CACNC,SAAS,EACTC,QAAS,GACTC,OAAQ,MACRC,OAAQ,EACRC,OAAQ,K,EASVC,UAAY,SAAAC,GAEV,EAAKC,SAAS,CACZL,OAAQI,EAAEE,OAAOC,QAAQP,U,EAG7BQ,OAAS,SAAAJ,GAEP,EAAKC,SAAS,CACZI,IAAKC,OAAON,EAAEE,OAAOK,U,2MAdX,wC,SACWC,MADX,yC,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKX,SAAS,CAAEN,QAASgB,EAAKE,QAASnB,SAAS,I,qIAcxC,IAAD,OACP,GAAIkB,KAAKnB,MAAMC,QACb,OACE,yBAAKV,UAAU,QACb,kBAAC,IAAD,CAAU8B,OAAQ,IAAKC,MAAO,IAAKC,MAAO,MAIhD,IAAKJ,KAAKnB,MAAME,QACd,OAAO,0CAET,IAAIsB,EAAWL,KAAKnB,MAAME,QAAQC,QAAO,SAAAsB,GACvC,OAAOA,EAAOC,IAAId,KAAO,EAAKZ,MAAMI,QAAUqB,EAAOC,IAAId,KAAO,EAAKZ,MAAMK,UAEnD,QAAtBc,KAAKnB,MAAMG,SACbqB,EAAWL,KAAKnB,MAAME,QAAQC,QAAO,SAAAsB,GAEnC,GADAE,QAAQC,IAAIH,EAAOI,QACfJ,EAAOI,SAAW,EAAK7B,MAAMG,OAC/B,OAAOsB,MAeb,OACE,6BAASlC,UAAU,cACjB,4BAAQuC,cAAY,OAAOC,QAASZ,KAAKb,WAAzC,QAGA,4BAAQwB,cAAY,SAASC,QAASZ,KAAKb,WAA3C,UAGA,4BAAQwB,cAAY,MAAMC,QAASZ,KAAKb,WAAxC,OAGA,yBAAKf,UAAU,OAEb,kBAAC,IAAD,CAAYyC,MAAO,CAAEC,IAAK,GAAIC,IAAK,KAAOC,MAAO,CAAC,EAAG,KAAMC,SAAO,EAACC,SApBxD,SAAAC,GACfX,QAAQC,IAAIU,GACZ,EAAK9B,SAAS,CACZJ,OAAQkC,EAAM,GACdjC,OAAQiC,EAAM,QAiBZ,2CAAiBnB,KAAKnB,MAAMI,QAC5B,2CAAiBe,KAAKnB,MAAMK,SAE9B,8BACGmB,EAASe,KAAI,SAAAd,GACZ,OACE,yBAAKlC,UAAU,UAAUiD,IAAKf,EAAOgB,MAAMC,MACzC,kBAACrD,EAAD,CAAQG,KAAMiC,EAAOjC,KAAMK,QAAS4B,EAAO5B,oB,GAjFd8C,IAAMC,WCG/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ff668bf7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Person(props) {\r\n  return (\r\n    <div className=\"theBody\">\r\n      <div className=\"txt\">\r\n        {props.name.title}. {props.name.first} {props.name.last}\r\n      </div>\r\n      <img src={props.picture.large} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport Nouislider from \"nouislider-react\";\nimport \"nouislider/distribute/nouislider.css\";\nimport Skeleton from \"react-loading-skeleton\";\n\nimport Person from \"./Person\";\nimport \"./App.css\";\n\nexport default class FetchRandomUser extends React.Component {\n  state = {\n    loading: true,\n    persons: [],\n    filter: \"all\",\n    minAge: 0,\n    maxAge: 100\n  };\n\n  async componentDidMount() {\n    const url = \"https://randomuser.me/api/?results=24\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ persons: data.results, loading: false });\n  }\n  setFilter = e => {\n    // console.log(e.target.dataset.filter);\n    this.setState({\n      filter: e.target.dataset.filter\n    });\n  };\n  setAge = e => {\n    //console.log(e.target.dataset.age);\n    this.setState({\n      age: Number(e.target.value)\n    });\n  };\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"load\">\n          <Skeleton height={100} width={130} count={10} />\n        </div>\n      );\n    }\n    if (!this.state.persons) {\n      return <div>no ppl...</div>;\n    }\n    let filtered = this.state.persons.filter(person => {\n      return person.dob.age >= this.state.minAge && person.dob.age <= this.state.maxAge;\n    });\n    if (this.state.filter !== \"all\") {\n      filtered = this.state.persons.filter(person => {\n        console.log(person.gender);\n        if (person.gender === this.state.filter) {\n          return person;\n        }\n      });\n    }\n    /*let old = this.state.persons;\n    if (this.state.age <= old) {\n      console.log(\"50+\");\n    }*/\n    const onUpdate = index => {\n      console.log(index);\n      this.setState({\n        minAge: index[0],\n        maxAge: index[1]\n      });\n    };\n    return (\n      <section className=\"sectionAll\">\n        <button data-filter=\"male\" onClick={this.setFilter}>\n          Male\n        </button>\n        <button data-filter=\"female\" onClick={this.setFilter}>\n          Female\n        </button>\n        <button data-filter=\"all\" onClick={this.setFilter}>\n          All\n        </button>\n        <div className=\"age\">\n          {/* <input type=\"range\" value={this.state.age} onChange={this.setAge} name=\"points\" min=\"0\" max=\"100\" /> */}\n          <Nouislider range={{ min: 18, max: 100 }} start={[0, 100]} connect onUpdate={onUpdate} />\n          <p>minimum age: {this.state.minAge}</p>\n          <p>maximum age: {this.state.maxAge}</p>\n        </div>\n        <main>\n          {filtered.map(person => {\n            return (\n              <div className=\"theBody\" key={person.login.uuid}>\n                <Person name={person.name} picture={person.picture} />\n              </div>\n            );\n          })}\n        </main>\n      </section>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}